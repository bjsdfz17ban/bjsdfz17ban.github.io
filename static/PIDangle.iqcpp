{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START IQ MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END IQ MACROS\n\n\n// Robot configuration code.\ninertial BrainInertial = inertial();\nmotor Left = motor(PORT6, false);\nmotor Right = motor(PORT12, true);\n#pragma endregion VEXcode Generated Robot Configuration\n\n//----------------------------------------------------------------------------\n//                                                                            \n//    Module:       main.cpp                                                  \n//    Author:       {author}                                                  \n//    Created:      {date}                                                    \n//    Description:  IQ project                                                \n//                                                                            \n//----------------------------------------------------------------------------\n\n// Include the IQ Library\n#include \"iq_cpp.h\"\n\n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nconst double KP = 0.01;\nconst double KI = 0;\nconst double KD = 0;\n\nvolatile bool finish_move = false;\n\n// 匀速直线运动\nvoid move(double v){\n  BrainInertial.setRotation(0,degrees);\n  finish_move = false;\n  double EI = 0,ED = 0;\n  while (1){\n    if (finish_move)\n      break;\n    double err = BrainInertial.rotation(degrees);\n    EI += err;\n    printf(\"%.lf\\n\",err);\n    output = KP * err * KI * EI + KD * (err - ED);\n    ED = err;\n    Left.setVelocity(v - outpout,percent);\n    Right.setVelocity(v + output,percent);\n  }\n}\n\nint main() {\n  // Begin project code\n  move(80);\n  return 0;\n}\n","textLanguage":"cpp","rconfig":[{"port":[6],"name":"Left","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"正","rev":"反"}},{"port":[12],"name":"Right","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"正","rev":"反"}}],"slot":5,"platform":"IQ","sdkVersion":"20220726.10.00.00","appVersion":"2.4.5","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"Second","target":"Physical"}